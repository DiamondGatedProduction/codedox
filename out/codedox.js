// Generated by Haxe 3.4.0 (git build development @ 67add1d)
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len1 = f.length - p;
	r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = true;
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var Vscode = require("vscode");
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = true;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_buffer_Buffer = require("buffer").Buffer;
var vscode__$IndentAction_IndentAction_$Impl_$ = require("vscode").IndentAction;
var vscode_Position = require("vscode").Position;
var vscode_Range = require("vscode").Range;
var vscode_Selection = require("vscode").Selection;
var wiggin_codedox_CodeDox = function(context) {
	this.m_fileHeader = null;
	this.m_commenter = null;
	wiggin_codedox_CodeDox.s_extPath = context.extensionPath;
	var config = Vscode.workspace.getConfiguration("codedox");
	config.get("firstrun",-1);
	context.subscriptions.push(Vscode.workspace.onDidChangeConfiguration(function(Void) {
		wiggin_codedox_CodeDox.s_settings = null;
	}));
	context.subscriptions.push(Vscode.workspace.onDidChangeTextDocument($bind(this,this.onTextChange)));
	this.registerCommand(context,"codedox" + ".setup",$bind(this,this.doSetup));
	this.registerTextEditorCommand(context,"codedox" + ".fileheader" + ".insert",$bind(this,this.insertFileHeader));
	this.registerTextEditorCommand(context,"codedox" + ".comment" + ".insert",$bind(this,this.insertComment));
	var bAutoPrefixOnEnter = config.get("autoPrefixOnEnter",true);
	var strCommentPrefix = config.get("commentprefix","*  ");
	if(bAutoPrefixOnEnter) {
		Vscode.languages.setLanguageConfiguration("haxe",{ onEnterRules : [{ beforeText : new RegExp("^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$"), afterText : new RegExp("^\\s*\\*\\/$"), action : { indentAction : vscode__$IndentAction_IndentAction_$Impl_$.IndentOutdent, appendText : " " + strCommentPrefix}},{ beforeText : new RegExp("^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$"), action : { indentAction : vscode__$IndentAction_IndentAction_$Impl_$.None, appendText : " " + strCommentPrefix}},{ beforeText : new RegExp("^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$"), action : { indentAction : vscode__$IndentAction_IndentAction_$Impl_$.None, appendText : strCommentPrefix}},{ beforeText : new RegExp("^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$"), action : { indentAction : vscode__$IndentAction_IndentAction_$Impl_$.None, removeText : 1}},{ beforeText : new RegExp("^(\\t|(\\ \\ ))*\\ \\*[^/]*\\*\\/\\s*$"), action : { indentAction : vscode__$IndentAction_IndentAction_$Impl_$.None, removeText : 1}}]});
	}
};
wiggin_codedox_CodeDox.__name__ = true;
wiggin_codedox_CodeDox.activate = $hx_exports["activate"] = function(context) {
	new wiggin_codedox_CodeDox(context);
};
wiggin_codedox_CodeDox.getSettings = function() {
	if(wiggin_codedox_CodeDox.s_settings == null) {
		var config = Vscode.workspace.getConfiguration("codedox");
		var strCommentBegin = config.get("commentbegin","/**");
		var strHeaderBegin = config.get("headerbegin","/*");
		var strAutoClose = wiggin_codedox_CodeDox.getAutoClosingClose(strCommentBegin);
		var tmp = config.get("autoInsert",true);
		var tmp1 = config.get("commentend","*/");
		var tmp2 = config.get("commentprefix","*  ");
		var tmp3 = config.get("commentdescription","[Description]");
		var tmp4 = wiggin_util_StringUtil.right(strCommentBegin,1);
		var tmp5 = config.get("headerbegin","/*");
		var tmp6 = config.get("headerend","*/");
		wiggin_codedox_CodeDox.s_settings = { autoInsert : tmp, strCommentBegin : strCommentBegin, strCommentEnd : tmp1, strCommentPrefix : tmp2, strCommentDescription : tmp3, strCommentTrigger : tmp4, strAutoClosingClose : strAutoClose != null ? strAutoClose : "", strHeaderBegin : tmp5, strHeaderEnd : tmp6, strHeaderPrefix : config.get("headerprefix"," *"), strHeaderTrigger : wiggin_util_StringUtil.right(strHeaderBegin,1)};
	}
	return wiggin_codedox_CodeDox.s_settings;
};
wiggin_codedox_CodeDox.getExtPath = function() {
	return wiggin_codedox_CodeDox.s_extPath;
};
wiggin_codedox_CodeDox.getAutoClosingClose = function(strAutoClosingOpen) {
	if(strAutoClosingOpen == "/**") {
		return "**/";
	} else {
		return wiggin_util_StringUtil.reverse(strAutoClosingOpen);
	}
};
wiggin_codedox_CodeDox.initFirstRun = function(config) {
};
wiggin_codedox_CodeDox.prototype = {
	registerCommand: function(context,strCmd,callback) {
		var disposable = Vscode.commands.registerCommand(strCmd,callback);
		context.subscriptions.push(disposable);
	}
	,registerTextEditorCommand: function(context,strCmd,callback) {
		var disposable = Vscode.commands.registerTextEditorCommand(strCmd,callback);
		context.subscriptions.push(disposable);
	}
	,doSetup: function() {
		try {
			var setup = new wiggin_codedox_Setup();
			setup.doSetup();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.handleError("Error setting up minimal config: ",e,haxe_CallStack.exceptionStack());
		}
	}
	,insertFileHeader: function(editor,edit) {
		try {
			if(this.m_fileHeader == null) {
				this.m_fileHeader = new wiggin_codedox_FileHeader();
			}
			this.m_fileHeader.insertFileHeader(null,editor,edit);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.handleError("Error inserting file header: ",e,haxe_CallStack.exceptionStack());
		}
	}
	,insertComment: function(editor,edit) {
		try {
			if(this.m_commenter == null) {
				this.m_commenter = new wiggin_codedox_Commenter();
			}
			var doc = editor.document;
			var pos = wiggin_util_ParseUtil.findPrevBlankLine(editor,editor.selection.active);
			var line = doc.lineAt(pos);
			this.m_commenter.insertComment(line,editor,edit);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.handleError("Error inserting comment: ",e,haxe_CallStack.exceptionStack());
		}
	}
	,onTextChange: function(evt) {
		try {
			var settings = wiggin_codedox_CodeDox.getSettings();
			var doc = evt.document;
			if(!settings.autoInsert || doc.languageId != "haxe" || evt.contentChanges.length != 1) {
				return;
			}
			var editor = Vscode.window.activeTextEditor;
			if(editor.document != doc) {
				return;
			}
			var change = evt.contentChanges[0];
			var strChangeText = change.text;
			if(strChangeText != null && strChangeText.length > 0) {
				if(this.m_commenter != null && this.m_commenter.isInsertPending && strChangeText.indexOf(settings.strCommentDescription) != -1) {
					this.m_commenter.isInsertPending = false;
					var ft = wiggin_util_ParseUtil.findText(doc,change.range.start,settings.strCommentDescription);
					if(ft != null) {
						var sel = new vscode_Selection(ft.posEnd,ft.posStart);
						editor.selection = sel;
					}
				} else if(strChangeText == settings.strHeaderTrigger && doc.offsetAt(change.range.end) == 1 && change.range.isEmpty) {
					var line = doc.lineAt(0);
					if(line.text == settings.strHeaderBegin) {
						this.doHeaderInsert(line,editor);
					}
				} else if(strChangeText == settings.strCommentTrigger || strChangeText == settings.strCommentTrigger + settings.strAutoClosingClose) {
					var line1 = doc.lineAt(change.range.start.line);
					var str = line1.text;
					var strCheck = str != null && str.length > 0 ? StringTools.trim(str) : str;
					if(strCheck == settings.strCommentBegin || strCheck == settings.strCommentBegin + settings.strAutoClosingClose) {
						this.doCommentInsert(line1,editor);
					}
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.handleError("",e,haxe_CallStack.exceptionStack());
		}
	}
	,doHeaderInsert: function(line,editor) {
		var _gthis = this;
		if(this.m_fileHeader == null) {
			this.m_fileHeader = new wiggin_codedox_FileHeader();
		}
		editor.edit(function(edit) {
			_gthis.m_fileHeader.insertFileHeader(line,editor,edit);
		},{ undoStopBefore : false, undoStopAfter : true});
	}
	,doCommentInsert: function(line,editor) {
		var _gthis = this;
		if(this.m_commenter == null) {
			this.m_commenter = new wiggin_codedox_Commenter();
		}
		editor.edit(function(edit) {
			_gthis.m_commenter.insertComment(line,editor,edit);
		},{ undoStopBefore : false, undoStopAfter : true});
	}
	,handleError: function(strMsg,exp,stack) {
		if(strMsg != null && strMsg.length > 0) {
			strMsg = strMsg;
		} else {
			strMsg = "";
		}
		var strExp = exp != null ? Std.string(exp) : "";
		if(strMsg != null && strMsg.length > 0 || strExp != null && strExp.length > 0) {
			Vscode.window.showErrorMessage(strMsg + strExp);
			console.log(strMsg + strExp);
			if(stack != null) {
				console.log(haxe_CallStack.toString(stack));
			}
		}
	}
	,isLangaugeSupported: function(strLangId) {
		if(strLangId == "haxe") {
			return true;
		} else {
			return false;
		}
	}
	,__class__: wiggin_codedox_CodeDox
};
var wiggin_codedox_Commenter = function() {
	this.isInsertPending = false;
};
wiggin_codedox_Commenter.__name__ = true;
wiggin_codedox_Commenter.getFunctionRegex = function(strLangaugeId) {
	var regex = strLangaugeId == "haxe" ? new EReg("(?:function\\s+\\w+\\s*)(?:<[\\s\\S]+>\\s*)*\\(([^)]*)\\)(?:(?:(?:\\s*:\\s*)*(\\w*[^{;]*)))","") : new EReg("(?:function\\s+\\w+\\s*)(?:<[\\s\\S]+>\\s*)*\\(([^)]*)\\)(?:(?:(?:\\s*:\\s*)*(\\w*[^{;]*)))","");
	return regex;
};
wiggin_codedox_Commenter.composeComment = function(strIndent,arrParams,strReturnType) {
	var settings = wiggin_codedox_CodeDox.getSettings();
	var sb_b = "";
	sb_b = "" + (strIndent == null ? "null" : "" + strIndent);
	sb_b += Std.string(settings.strCommentBegin);
	sb_b += "\n";
	sb_b += strIndent == null ? "null" : "" + strIndent;
	sb_b += " ";
	sb_b += Std.string(settings.strCommentPrefix);
	sb_b += Std.string(settings.strCommentDescription);
	sb_b += "\n";
	if(arrParams != null) {
		var _g = 0;
		while(_g < arrParams.length) {
			var item = arrParams[_g];
			++_g;
			sb_b += strIndent == null ? "null" : "" + strIndent;
			sb_b += " ";
			sb_b += Std.string(settings.strCommentPrefix);
			sb_b += "@param ";
			sb_b += Std.string(item.name);
			sb_b += " - \n";
		}
	}
	if(strReturnType != null && strReturnType.length > 0 && strReturnType != "Void") {
		sb_b += strIndent == null ? "null" : "" + strIndent;
		sb_b += " ";
		sb_b += Std.string(settings.strCommentPrefix);
		sb_b += "@return ";
		sb_b += strReturnType == null ? "null" : "" + strReturnType;
		sb_b += "\n";
	}
	sb_b += strIndent == null ? "null" : "" + strIndent;
	sb_b += " ";
	sb_b += Std.string(settings.strCommentEnd);
	sb_b += "\n";
	return sb_b;
};
wiggin_codedox_Commenter.parseParams = function(strParams,strLanguageId) {
	if(strParams == null) {
		strParams = "";
	} else {
		strParams = strParams;
	}
	var arrParams = [];
	var arr = wiggin_util_ParseUtil.splitByCommas(strParams);
	var _g = 0;
	while(_g < arr.length) {
		var item = arr[_g];
		++_g;
		item = StringTools.trim(item);
		if(item != null && item.length > 0) {
			var arrItem = item.split(":");
			var strType = arrItem.length > 1 ? arrItem[1] : "";
			var a = arrItem.length - 1;
			var strName = arrItem[a > 0 ? 0 : a];
			arrParams.push({ name : StringTools.trim(strName), type : StringTools.trim(strType)});
		}
	}
	return arrParams;
};
wiggin_codedox_Commenter.prototype = {
	insertComment: function(line,editor,edit) {
		var strComment = this.getComment(line,editor);
		if(strComment != null) {
			edit.replace(line.rangeIncludingLineBreak,strComment);
			this.isInsertPending = true;
		} else {
			console.log("insertComment aborted: no function to parse");
		}
	}
	,getComment: function(line,editor) {
		var strComment = null;
		var doc = editor.document;
		var posStart = line.range.end;
		var iOffset = doc.offsetAt(posStart);
		var posEnd = doc.positionAt(iOffset + 1024);
		var range = new vscode_Range(posStart,posEnd);
		range = doc.validateRange(range);
		var strText = doc.getText(range);
		var r = wiggin_codedox_Commenter.getFunctionRegex(doc.languageId);
		if(r.match(strText)) {
			var iPosMatch = r.matchedPos().pos;
			var str = r.matched(1);
			var strParams = str != null && str.length > 0 ? StringTools.trim(str) : str;
			var str1 = r.matched(2);
			var strReturnType = str1 != null && str1.length > 0 ? StringTools.trim(str1) : str1;
			var settings = wiggin_codedox_CodeDox.getSettings();
			var strPreamble = HxOverrides.substr(strText,0,iPosMatch + 1);
			if(!wiggin_util_StringUtil.contains(strPreamble,[settings.strCommentBegin,settings.strCommentEnd,"{","}",";"])) {
				var posMatch = doc.positionAt(iOffset + iPosMatch);
				var strIndent = wiggin_util_ParseUtil.getIndent(doc,posMatch);
				var arrParams = wiggin_codedox_Commenter.parseParams(strParams,doc.languageId);
				console.log("*****");
				console.log("Indent Len=" + strIndent.length);
				console.log("Indent=" + wiggin_util_StringUtil.escapeWhitespace(strIndent));
				console.log("params=" + Std.string(arrParams));
				console.log("return=" + strReturnType);
				console.log("*****");
				strComment = wiggin_codedox_Commenter.composeComment(strIndent,arrParams,strReturnType);
			}
		}
		return strComment;
	}
	,__class__: wiggin_codedox_Commenter
};
var wiggin_codedox_FileHeader = function() {
};
wiggin_codedox_FileHeader.__name__ = true;
wiggin_codedox_FileHeader.addDefaultParams = function(map,config) {
	var date = new Date();
	var strValue = Std.string(date.getFullYear());
	if(!(__map_reserved["year"] != null ? map.existsReserved("year") : map.h.hasOwnProperty("year"))) {
		if(__map_reserved["year"] != null) {
			map.setReserved("year",strValue);
		} else {
			map.h["year"] = strValue;
		}
	}
	var strValue1 = Std.string(date.getMonth() + 1);
	if(!(__map_reserved["month"] != null ? map.existsReserved("month") : map.h.hasOwnProperty("month"))) {
		if(__map_reserved["month"] != null) {
			map.setReserved("month",strValue1);
		} else {
			map.h["month"] = strValue1;
		}
	}
	var strValue2 = Std.string(date.getDate());
	if(!(__map_reserved["day"] != null ? map.existsReserved("day") : map.h.hasOwnProperty("day"))) {
		if(__map_reserved["day"] != null) {
			map.setReserved("day",strValue2);
		} else {
			map.h["day"] = strValue2;
		}
	}
	var strValue3 = HxOverrides.dateStr(date);
	if(!(__map_reserved["timestamp"] != null ? map.existsReserved("timestamp") : map.h.hasOwnProperty("timestamp"))) {
		if(__map_reserved["timestamp"] != null) {
			map.setReserved("timestamp",strValue3);
		} else {
			map.h["timestamp"] = strValue3;
		}
	}
	var strValue4 = DateTools.format(date,"%T");
	if(!(__map_reserved["time24h"] != null ? map.existsReserved("time24h") : map.h.hasOwnProperty("time24h"))) {
		if(__map_reserved["time24h"] != null) {
			map.setReserved("time24h",strValue4);
		} else {
			map.h["time24h"] = strValue4;
		}
	}
	var strValue5 = DateTools.format(date,"%F");
	if(!(__map_reserved["date"] != null ? map.existsReserved("date") : map.h.hasOwnProperty("date"))) {
		if(__map_reserved["date"] != null) {
			map.setReserved("date",strValue5);
		} else {
			map.h["date"] = strValue5;
		}
	}
	var strValue6 = DateTools.format(date,"%l:%M:%S %p");
	if(!(__map_reserved["time"] != null ? map.existsReserved("time") : map.h.hasOwnProperty("time"))) {
		if(__map_reserved["time"] != null) {
			map.setReserved("time",strValue6);
		} else {
			map.h["time"] = strValue6;
		}
	}
	var settings = wiggin_codedox_CodeDox.getSettings();
	var strValue7 = settings.strCommentBegin;
	if(!(__map_reserved["commentbegin"] != null ? map.existsReserved("commentbegin") : map.h.hasOwnProperty("commentbegin"))) {
		if(__map_reserved["commentbegin"] != null) {
			map.setReserved("commentbegin",strValue7);
		} else {
			map.h["commentbegin"] = strValue7;
		}
	}
	var strValue8 = settings.strCommentPrefix;
	if(!(__map_reserved["commentprefix"] != null ? map.existsReserved("commentprefix") : map.h.hasOwnProperty("commentprefix"))) {
		if(__map_reserved["commentprefix"] != null) {
			map.setReserved("commentprefix",strValue8);
		} else {
			map.h["commentprefix"] = strValue8;
		}
	}
	var strValue9 = settings.strCommentEnd;
	if(!(__map_reserved["commentend"] != null ? map.existsReserved("commentend") : map.h.hasOwnProperty("commentend"))) {
		if(__map_reserved["commentend"] != null) {
			map.setReserved("commentend",strValue9);
		} else {
			map.h["commentend"] = strValue9;
		}
	}
	var strValue10 = settings.strHeaderBegin;
	if(!(__map_reserved["headerbegin"] != null ? map.existsReserved("headerbegin") : map.h.hasOwnProperty("headerbegin"))) {
		if(__map_reserved["headerbegin"] != null) {
			map.setReserved("headerbegin",strValue10);
		} else {
			map.h["headerbegin"] = strValue10;
		}
	}
	var strValue11 = settings.strHeaderPrefix;
	if(!(__map_reserved["headerprefix"] != null ? map.existsReserved("headerprefix") : map.h.hasOwnProperty("headerprefix"))) {
		if(__map_reserved["headerprefix"] != null) {
			map.setReserved("headerprefix",strValue11);
		} else {
			map.h["headerprefix"] = strValue11;
		}
	}
	var strValue12 = settings.strHeaderEnd;
	if(!(__map_reserved["headerend"] != null ? map.existsReserved("headerend") : map.h.hasOwnProperty("headerend"))) {
		if(__map_reserved["headerend"] != null) {
			map.setReserved("headerend",strValue12);
		} else {
			map.h["headerend"] = strValue12;
		}
	}
	wiggin_codedox_FileHeader.addDefaultLicenses(map);
};
wiggin_codedox_FileHeader.addDefaultLicenses = function(map) {
	var arr = wiggin_codedox_Setup.getDefaultLicenses();
	var _g = 0;
	while(_g < arr.length) {
		var license = arr[_g];
		++_g;
		var strKey = license.name;
		var strValue = license.text.join("\n");
		if(!(__map_reserved[strKey] != null ? map.existsReserved(strKey) : map.h.hasOwnProperty(strKey))) {
			if(__map_reserved[strKey] != null) {
				map.setReserved(strKey,strValue);
			} else {
				map.h[strKey] = strValue;
			}
		}
	}
};
wiggin_codedox_FileHeader.setIfAbsent = function(map,strKey,strValue) {
	if(!(__map_reserved[strKey] != null ? map.existsReserved(strKey) : map.h.hasOwnProperty(strKey))) {
		if(__map_reserved[strKey] != null) {
			map.setReserved(strKey,strValue);
		} else {
			map.h[strKey] = strValue;
		}
	}
};
wiggin_codedox_FileHeader.setNeverAsk = function(config) {
	var update = { neverAskTemplate : true};
	wiggin_util_ConfigUtil.update(config,"codedox",update).then(function(Void) {
		console.log("codedox" + ".neverAskTemplate set to true successfully.");
	},function(result) {
		console.log("Failed to set " + "codedox" + ".neverAskTemplate");
		console.log(result);
	});
};
wiggin_codedox_FileHeader.prototype = {
	insertFileHeader: function(line,editor,edit) {
		var str = this.getFileHeader(editor.document.languageId);
		var doc = editor.document;
		var range = new vscode_Range(doc.positionAt(0),doc.positionAt(str.length));
		var strDoc = doc.getText(range);
		if(str.length == 0 || strDoc != str) {
			if(line != null) {
				edit.replace(line.rangeIncludingLineBreak,str);
			} else {
				edit.insert(new vscode_Position(0,0),str);
			}
		}
	}
	,getFileHeader: function(strLang) {
		var config = Vscode.workspace.getConfiguration();
		if(config == null) {
			throw new js__$Boot_HaxeError("Template config missing.");
		}
		var strTemplate = this.getTemplate(config,strLang);
		strTemplate = this.populateTemplate(config,strTemplate,strLang);
		return strTemplate + "\n";
	}
	,getTemplate: function(config,strLang) {
		var template = config.get("codedox" + ".fileheader" + ".templates" + "." + strLang,null);
		if(template == null) {
			template = config.get("codedox" + ".fileheader" + ".templates" + ".*",null);
		}
		if(template == null || template.length == 0) {
			if(config.get("codedox" + ".neverAskTemplate",false)) {
				throw new js__$Boot_HaxeError("");
			}
			var msg = "codedox" + ": No file header template defined for " + strLang + ". Would you like to configure this feature?";
			var item1 = { title : "Yes"};
			var item2 = { title : "No", isCloseAffordance : true};
			var item3 = { title : "Never"};
			Vscode.window.showErrorMessage(msg,item1,item2,item3).then(function(item) {
				if(item.title == item1.title) {
					Vscode.commands.executeCommand("codedox" + ".setup");
				} else if(item.title == item3.title) {
					wiggin_codedox_FileHeader.setNeverAsk(config);
				}
			});
			template = [""];
		}
		return template.join("\n");
	}
	,populateTemplate: function(config,strTemplate,strLang) {
		var params = config.get("codedox" + ".fileheader" + ".params" + "." + strLang,null);
		if(params == null) {
			params = config.get("codedox" + ".fileheader" + ".params" + ".*",null);
		}
		var mapParams;
		var mapParams1;
		if(params != null && Type["typeof"](params) == ValueType.TObject) {
			var o = params;
			mapParams1 = (o == null ? null : js_Boot.getClass(o)) == null;
		} else {
			mapParams1 = false;
		}
		if(mapParams1) {
			mapParams = wiggin_util_JsonUtil.structToMap(params);
		} else {
			mapParams = new haxe_ds_StringMap();
		}
		wiggin_codedox_FileHeader.addDefaultParams(mapParams,config);
		var mapParamsNorm = this.normalizeParams(mapParams);
		var bChanged = true;
		var strChanged;
		var regex;
		while(bChanged) {
			bChanged = false;
			var key = mapParamsNorm.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				regex = new EReg(key1,"gi");
				strChanged = strTemplate.replace(regex.r,__map_reserved[key1] != null ? mapParamsNorm.getReserved(key1) : mapParamsNorm.h[key1]);
				if(!bChanged) {
					bChanged = strChanged != strTemplate;
				} else {
					bChanged = true;
				}
				strTemplate = strChanged;
			}
		}
		return strTemplate;
	}
	,normalizeParams: function(params) {
		var map = new haxe_ds_StringMap();
		var val;
		var str;
		var key = params.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			val = __map_reserved[key1] != null ? params.getReserved(key1) : params.h[key1];
			if((val instanceof Array) && val.__enum__ == null) {
				var arrString = [];
				var arr = js_Boot.__cast(val , Array);
				var _g = 0;
				while(_g < arr.length) {
					var elem = arr[_g];
					++_g;
					arrString.push(Std.string(elem));
				}
				str = arrString.join("\n");
			} else {
				str = Std.string(val);
			}
			if(str != null && str.length > 0) {
				var strKeyEsc = wiggin_util_RegExUtil.escapeRegExPattern("${" + key1 + "}");
				if(__map_reserved[strKeyEsc] != null) {
					map.setReserved(strKeyEsc,str);
				} else {
					map.h[strKeyEsc] = str;
				}
			}
		}
		return map;
	}
	,__class__: wiggin_codedox_FileHeader
};
var wiggin_codedox_Setup = function() {
};
wiggin_codedox_Setup.__name__ = true;
wiggin_codedox_Setup.getDefaultLicenses = function() {
	var str = js_node_Fs.readFileSync(wiggin_codedox_CodeDox.getExtPath() + "/defaultlicenses.json",{ encoding : "utf8"});
	var arr = JSON.parse(str);
	return arr;
};
wiggin_codedox_Setup.pickDefaultLicense = function() {
	var config = Vscode.workspace.getConfiguration();
	return new Promise(function(resolve,reject) {
		var arr = wiggin_codedox_Setup.getDefaultLicenses();
		var items = [];
		var _g = 0;
		while(_g < arr.length) {
			var license = arr[_g];
			++_g;
			items.push({ label : license.description, description : license.name});
		}
		Vscode.window.showQuickPick(items,{ placeHolder : "Select a default license"}).then(function(item) {
			if(item != null) {
				wiggin_codedox_Setup.setDefaultTemplate(item.description,config).then(function(Void) {
					resolve(true);
				},function(reason) {
					reject(reason);
				});
			}
		});
	});
};
wiggin_codedox_Setup.setDefaultTemplate = function(strLicense,config) {
	return new Promise(function(resolve,reject) {
		var str = "${" + strLicense + "}";
		var update = { fileheader : { templates : { "*" : [str]}}};
		wiggin_util_ConfigUtil.update(config,"codedox",update).then(function(Void) {
			console.log("codedox" + "Default template set successfully.");
			resolve(true);
		},function(reason) {
			console.log("Failed to set " + "codedox" + " default template.");
			console.log(reason);
			reject("Error writing config. Check for errors in your user settings.json and try again.");
		});
	});
};
wiggin_codedox_Setup.inputCompany = function() {
	return null;
};
wiggin_codedox_Setup.prototype = {
	doSetup: function() {
		return new Promise(function(resolve,reject) {
			Promise.all([wiggin_codedox_Setup.pickDefaultLicense(),wiggin_codedox_Setup.inputCompany()]).then(function(arr) {
				resolve(true);
			},function(reason) {
				reject(reason);
			});
		});
	}
	,__class__: wiggin_codedox_Setup
};
var wiggin_util_ConfigUtil = function() { };
wiggin_util_ConfigUtil.__name__ = true;
wiggin_util_ConfigUtil.update = function(config,strSection,update,bGlobal) {
	if(bGlobal == null) {
		bGlobal = true;
	}
	var curr = config.get(strSection,null);
	if(curr == null) {
		curr = { };
	}
	var merged = wiggin_util_StructUtil.mergeStruct(curr,update);
	return config.update(strSection,merged,bGlobal);
};
wiggin_util_ConfigUtil.updateIfAbsent = function(config,strSection,update,bGlobal) {
	if(bGlobal == null) {
		bGlobal = true;
	}
	var curr = config.get(strSection,null);
	if(curr == null) {
		curr = { };
	}
	var merged = wiggin_util_StructUtil.mergeStruct(update,curr);
	return config.update(strSection,merged,bGlobal);
};
var wiggin_util__$DynamicObject_DynamicObject_$Impl_$ = {};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.__name__ = true;
wiggin_util__$DynamicObject_DynamicObject_$Impl_$._new = function(obj) {
	var this1 = obj == null ? { } : obj;
	return this1;
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.set = function(this1,key,value) {
	this1[key] = value;
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.get = function(this1,key) {
	return this1[key];
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
wiggin_util__$DynamicObject_DynamicObject_$Impl_$.keys = function(this1) {
	return Reflect.fields(this1);
};
var wiggin_util_JsonUtil = function() { };
wiggin_util_JsonUtil.__name__ = true;
wiggin_util_JsonUtil.isStruct = function(obj) {
	if(obj != null && Type["typeof"](obj) == ValueType.TObject) {
		return (obj == null ? null : js_Boot.getClass(obj)) == null;
	} else {
		return false;
	}
};
wiggin_util_JsonUtil.isArray = function(obj) {
	if((obj instanceof Array)) {
		return obj.__enum__ == null;
	} else {
		return false;
	}
};
wiggin_util_JsonUtil.structToMap = function(obj) {
	var map = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = Reflect.fields(obj);
	while(_g < _g1.length) {
		var fname = _g1[_g];
		++_g;
		var value = Reflect.field(obj,fname);
		if(__map_reserved[fname] != null) {
			map.setReserved(fname,value);
		} else {
			map.h[fname] = value;
		}
	}
	return map;
};
var wiggin_util_MathUtil = function() { };
wiggin_util_MathUtil.__name__ = true;
wiggin_util_MathUtil.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
wiggin_util_MathUtil.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
var wiggin_util_Direction = { __ename__ : true, __constructs__ : ["Forward","Backward"] };
wiggin_util_Direction.Forward = ["Forward",0];
wiggin_util_Direction.Forward.toString = $estr;
wiggin_util_Direction.Forward.__enum__ = wiggin_util_Direction;
wiggin_util_Direction.Backward = ["Backward",1];
wiggin_util_Direction.Backward.toString = $estr;
wiggin_util_Direction.Backward.__enum__ = wiggin_util_Direction;
var wiggin_util_ParseUtil = function() { };
wiggin_util_ParseUtil.__name__ = true;
wiggin_util_ParseUtil.splitByCommas = function(str) {
	var arr = [];
	if(str != null && str.length > 0) {
		var strToken = "";
		var strMatchingQuote = "";
		var bInsideQuotes = false;
		var bNextIsLiteral = false;
		var ch = new wiggin_util_StringIterator(str);
		while(ch.hasNext()) {
			var ch1 = ch.next();
			if(bNextIsLiteral) {
				strToken += ch1;
				bNextIsLiteral = false;
			} else if(bInsideQuotes) {
				if(ch1 == "\\") {
					bNextIsLiteral = true;
				} else {
					strToken += ch1;
					if(ch1 == strMatchingQuote) {
						bInsideQuotes = false;
					}
				}
			} else if(ch1 == ",") {
				arr.push(StringTools.trim(strToken));
				strToken = "";
			} else {
				strToken += ch1;
				var idx = "\"'<({[".indexOf(ch1);
				if(idx > -1) {
					strMatchingQuote = "\"'>)}]".charAt(idx);
					bInsideQuotes = true;
				}
			}
		}
		arr.push(StringTools.trim(strToken));
	}
	return arr;
};
wiggin_util_ParseUtil.findLine = function(doc,pos,dir,regex) {
	pos = doc.validatePosition(pos);
	var iDir = dir == wiggin_util_Direction.Forward ? 1 : -1;
	var lineFound = null;
	var iMaxLine = doc.lineCount - 1;
	var iLine = pos.line;
	var line;
	while(iLine >= 0 && iLine <= iMaxLine) {
		line = doc.lineAt(iLine);
		if(line != null && regex.match(line.text)) {
			lineFound = line;
			break;
		}
		iLine += iDir;
	}
	return lineFound;
};
wiggin_util_ParseUtil.findTextInLine = function(line,iStartChar,strText) {
	if(iStartChar == null) {
		iStartChar = 0;
	}
	var ft = null;
	var strLine = line.text;
	if(strLine != null && strLine.length > 0 && iStartChar < strLine.length) {
		var i = strLine.indexOf(strText,iStartChar);
		if(i != -1) {
			ft = { posStart : new vscode_Position(line.lineNumber,i), posEnd : new vscode_Position(line.lineNumber,i + strText.length)};
		}
	}
	return ft;
};
wiggin_util_ParseUtil.findText = function(doc,posStart,strText) {
	if(posStart == null) {
		posStart = new vscode_Position(0,0);
	} else {
		posStart = doc.validatePosition(posStart);
	}
	var ft = null;
	var iMaxLine = doc.lineCount - 1;
	var iLine = posStart.line;
	var iStartIndex = posStart.character;
	var line;
	while(iLine >= 0 && iLine <= iMaxLine) {
		line = doc.lineAt(iLine);
		if(line != null) {
			ft = wiggin_util_ParseUtil.findTextInLine(line,iStartIndex,strText);
			if(ft != null) {
				break;
			}
			iStartIndex = 0;
		}
		++iLine;
	}
	return ft;
};
wiggin_util_ParseUtil.findPrevBlankLine = function(editor,pos) {
	var doc = editor.document;
	var posBack = pos["with"]({ character : 0});
	while(posBack.line > 0) {
		var line = doc.lineAt(posBack);
		if(line.isEmptyOrWhitespace) {
			break;
		}
		var strLine = line.text;
		if(strLine.indexOf("}") != -1 || strLine.indexOf(";") != -1) {
			posBack = posBack["with"]({ line : posBack.line + 1});
			editor.edit(function(tee) {
				tee.insert(posBack,"\n");
			});
			posBack = posBack["with"]({ line : posBack.line + 1});
			break;
		}
		posBack = posBack["with"]({ line : posBack.line - 1});
	}
	return posBack;
};
wiggin_util_ParseUtil.getIndent = function(doc,pos) {
	var workspace = Vscode.workspace;
	var settings = workspace.getConfiguration();
	var iTabSize = settings.get("editor.tabSize",1);
	var bInsertSpaces = settings.get("editor.insertSpaces",true);
	var iIndent = 0;
	var line = wiggin_util_ParseUtil.findLine(doc,pos,wiggin_util_Direction.Backward,new EReg("[^\\s]",""));
	if(line != null && StringTools.startsWith(line.text,"{")) {
		iIndent = iTabSize;
	} else {
		var strSpace = line.text.substring(0,line.firstNonWhitespaceCharacterIndex);
		iIndent = StringTools.replace(strSpace,"\t",wiggin_util_StringUtil.padTail("",iTabSize," ")).length;
	}
	var strIndent;
	if(bInsertSpaces) {
		strIndent = wiggin_util_StringUtil.padTail("",iIndent," ");
	} else {
		var iTabs = Math.floor(iIndent / iTabSize);
		strIndent = wiggin_util_StringUtil.padTail("",iTabs,"\t");
		strIndent += wiggin_util_StringUtil.padTail("",iIndent - iTabs * iTabSize," ");
	}
	return strIndent;
};
var wiggin_util_RegExUtil = function() { };
wiggin_util_RegExUtil.__name__ = true;
wiggin_util_RegExUtil.escapeRegExPattern = function(strPattern) {
	var r_r = new RegExp("([\\\\*+\\[\\](){}\\$.?\\^|])","g".split("u").join(""));
	return strPattern.replace(r_r,"\\$1");
};
var wiggin_util_StringUtil = function() { };
wiggin_util_StringUtil.__name__ = true;
wiggin_util_StringUtil.hasChars = function(str) {
	if(str != null) {
		return str.length > 0;
	} else {
		return false;
	}
};
wiggin_util_StringUtil.removeWhitespace = function(str) {
	if(!(str != null && str.length > 0)) {
		return str;
	}
	var r_r = new RegExp("\\s","g".split("u").join(""));
	var strOut = str.replace(r_r,"");
	return strOut;
};
wiggin_util_StringUtil.trim = function(str) {
	if(str != null && str.length > 0) {
		return StringTools.trim(str);
	} else {
		return str;
	}
};
wiggin_util_StringUtil.replaceAll = function(str,strSub,strRepl) {
	return StringTools.replace(str,strSub,strRepl);
};
wiggin_util_StringUtil.padTail = function(str,iMinSize,charPad) {
	if(str == null) {
		str = "";
	} else {
		str = str;
	}
	if(iMinSize < 0) {
		iMinSize = 0;
	} else {
		iMinSize = iMinSize;
	}
	if(str.length >= iMinSize || !(charPad != null && charPad.length > 0)) {
		return str;
	} else {
		return StringTools.rpad(str,charPad,iMinSize);
	}
};
wiggin_util_StringUtil.toEmptyIfNull = function(str) {
	if(str == null) {
		return "";
	} else {
		return str;
	}
};
wiggin_util_StringUtil.escapeWhitespace = function(str) {
	if(!(str != null && str.length > 0)) {
		return str;
	}
	str = StringTools.replace(str,"\t","\\t");
	str = StringTools.replace(str,"\n","\\n");
	str = StringTools.replace(str,"\r","\\r");
	str = StringTools.replace(str," ","\\s");
	return str;
};
wiggin_util_StringUtil.iterator = function(str) {
	return new wiggin_util_StringIterator(str);
};
wiggin_util_StringUtil.right = function(str,iCount) {
	var strRight = null;
	if(str != null) {
		var iSrcLen = str.length;
		if(iCount == 0) {
			strRight = "";
		} else if(iCount >= iSrcLen) {
			strRight = str;
		} else {
			strRight = str.substring(iSrcLen - iCount,iSrcLen);
		}
	}
	return strRight;
};
wiggin_util_StringUtil.left = function(str,iCount) {
	var strLeft = null;
	if(str != null) {
		var iSrcLen = str.length;
		if(iCount == 0) {
			strLeft = "";
		} else if(iCount >= iSrcLen) {
			strLeft = str;
		} else {
			strLeft = str.substring(0,iCount);
		}
	}
	return strLeft;
};
wiggin_util_StringUtil.reverse = function(str) {
	if(str == null || str == "") {
		return str;
	}
	var sb_b = "";
	var _g = -str.length + 1;
	while(_g < 1) {
		var i = _g++;
		sb_b += String.fromCharCode(str.charCodeAt(-i));
	}
	return sb_b;
};
wiggin_util_StringUtil.contains = function(str,arrStrSub) {
	var _g = 0;
	while(_g < arrStrSub.length) {
		var strSub = arrStrSub[_g];
		++_g;
		if(str.indexOf(strSub) != -1) {
			return true;
		}
	}
	return false;
};
var wiggin_util_StringIterator = function(s) {
	this.s = s == null ? "" : s;
	this.i = 0;
};
wiggin_util_StringIterator.__name__ = true;
wiggin_util_StringIterator.prototype = {
	hasNext: function() {
		return this.i < this.s.length;
	}
	,next: function() {
		return this.s.charAt(this.i++);
	}
	,__class__: wiggin_util_StringIterator
};
var wiggin_util_StructUtil = function() { };
wiggin_util_StructUtil.__name__ = true;
wiggin_util_StructUtil.isStruct = function(obj) {
	if(obj != null && Type["typeof"](obj) == ValueType.TObject) {
		return (obj == null ? null : js_Boot.getClass(obj)) == null;
	} else {
		return false;
	}
};
wiggin_util_StructUtil.mergeStruct = function(struct1,struct2) {
	if(struct1 == null) {
		return struct2;
	}
	if(struct2 == null) {
		return struct1;
	}
	if(struct1 == null && struct2 == null) {
		return null;
	}
	var merged = wiggin_util_StructUtil.deepClone(struct1);
	var source = struct2;
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var valMerged = merged[key];
		var valSource = source[key];
		var tmp;
		var tmp1;
		if(valSource != null && Type["typeof"](valSource) == ValueType.TObject) {
			var o = valSource;
			tmp1 = (o == null ? null : js_Boot.getClass(o)) == null;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			if(valMerged != null && Type["typeof"](valMerged) == ValueType.TObject) {
				var o1 = valMerged;
				tmp = (o1 == null ? null : js_Boot.getClass(o1)) == null;
			} else {
				tmp = false;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			merged[key] = wiggin_util_StructUtil.mergeStruct(valMerged,valSource);
		} else {
			merged[key] = valSource;
		}
	}
	return merged;
};
wiggin_util_StructUtil.deepClone = function(struct) {
	if(struct == null) {
		return null;
	}
	var input = struct;
	var copy = { };
	var _g = 0;
	var _g1 = Reflect.fields(input);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		var val = input[key];
		var tmp;
		if(val != null && Type["typeof"](val) == ValueType.TObject) {
			var o = val;
			tmp = (o == null ? null : js_Boot.getClass(o)) == null;
		} else {
			tmp = false;
		}
		if(tmp) {
			copy[key] = wiggin_util_StructUtil.deepClone(val);
		} else {
			copy[key] = val;
		}
	}
	return copy;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
js_Boot.__toStr = ({ }).toString;
wiggin_codedox_CodeDox.EXTENSION_NAME = "codedox";
wiggin_codedox_CodeDox.FEATURE_FILEHEADER = "codedox" + ".fileheader";
wiggin_codedox_CodeDox.FEATURE_COMMENT = "codedox" + ".comment";
wiggin_codedox_CodeDox.CMD_SETUP = "codedox" + ".setup";
wiggin_codedox_CodeDox.CMD_INSERT_FILE_HEADER = "codedox" + ".fileheader" + ".insert";
wiggin_codedox_CodeDox.CMD_INSERT_COMMENT = "codedox" + ".comment" + ".insert";
wiggin_codedox_FileHeader.TEMPLATES = "codedox" + ".fileheader" + ".templates";
wiggin_codedox_FileHeader.PARAMS = "codedox" + ".fileheader" + ".params";
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=codedox.js.map